{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\HenY\\\\Documents\\\\GitHub\\\\ieo-rep\\\\ieo-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const fetchUrl = async () => {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchUrl();\n  }, []);\n  return {\n    data,\n    loading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:\\Users\\HenY\\Documents\\GitHub\\ieo-rep\\ieo-website\\src\\hooks\\useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","loading","setLoading","fetchUrl","response","fetch","json"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAAA,oBACEH,QAAQ,CAAC,EAAD,CADV;AAAA;AAAA,QACfI,IADe;AAAA,QACTC,OADS;;AAAA,qBAEQL,QAAQ,CAAC,IAAD,CAFhB;AAAA;AAAA,QAEfM,OAFe;AAAA,QAENC,UAFM;;AAItB,QAAMC,QAAQ,GAAG,YAAY;AAC3B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA5B;AACA,UAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AAEAN,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAND;;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAAEJ,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAP;AACD,CAjBD;;AAmBA,eAAeJ,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = url => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchUrl = async () => {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n\r\n    setData(json);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUrl();\r\n  }, []);\r\n\r\n  return { data, loading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}