{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\n\nvar chain_function_1 = tslib_1.__importDefault(require(\"chain-function\"));\n\nvar ChildMapping_1 = require(\"./ChildMapping\");\n\nvar TransitionGroup = function (_super) {\n  tslib_1.__extends(TransitionGroup, _super);\n\n  function TransitionGroup(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.performAppear = function (key, component) {\n      _this.currentlyTransitioningKeys[key] = true;\n\n      if (component.componentWillAppear) {\n        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));\n      } else {\n        _this._handleDoneAppearing(key, component);\n      }\n    };\n\n    _this._handleDoneAppearing = function (key, component) {\n      if (component && component.componentDidAppear) {\n        component.componentDidAppear();\n      }\n\n      delete _this.currentlyTransitioningKeys[key];\n      var currentChildMapping = ChildMapping_1.getChildMapping(_this.props.children);\n\n      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n        _this.performLeave(key, component);\n      }\n    };\n\n    _this.performEnter = function (key, component) {\n      _this.currentlyTransitioningKeys[key] = true;\n\n      if (component.componentWillEnter) {\n        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));\n      } else {\n        _this._handleDoneEntering(key, component);\n      }\n    };\n\n    _this._handleDoneEntering = function (key, component) {\n      if (component && component.componentDidEnter) {\n        component.componentDidEnter();\n      }\n\n      delete _this.currentlyTransitioningKeys[key];\n      var currentChildMapping = ChildMapping_1.getChildMapping(_this.props.children);\n\n      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n        _this.performLeave(key, component);\n      }\n    };\n\n    _this.performLeave = function (key, component) {\n      _this.currentlyTransitioningKeys[key] = true;\n\n      if (component && component.componentWillLeave) {\n        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));\n      } else {\n        _this._handleDoneLeaving(key, component);\n      }\n    };\n\n    _this._handleDoneLeaving = function (key, component) {\n      if (component && component.componentDidLeave) {\n        component.componentDidLeave();\n      }\n\n      delete _this.currentlyTransitioningKeys[key];\n      var currentChildMapping = ChildMapping_1.getChildMapping(_this.props.children);\n\n      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n        _this.keysToEnter.push(key);\n      } else {\n        _this.setState(function (state) {\n          var newChildren = tslib_1.__assign({}, state.children);\n\n          delete newChildren[key];\n          return {\n            children: newChildren\n          };\n        });\n      }\n    };\n\n    _this.childRefs = Object.create(null);\n    _this.currentlyTransitioningKeys = {};\n    _this.keysToEnter = [];\n    _this.keysToLeave = [];\n    _this.state = {\n      children: ChildMapping_1.getChildMapping(props.children)\n    };\n    return _this;\n  }\n\n  TransitionGroup.prototype.componentDidMount = function () {\n    var initialChildMapping = this.state.children;\n\n    for (var key in initialChildMapping) {\n      if (initialChildMapping[key]) {\n        this.performAppear(key, this.childRefs[key]);\n      }\n    }\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function (props, state) {\n    var nextChildMapping = ChildMapping_1.getChildMapping(props.children);\n    var prevChildMapping = state.children;\n    return {\n      children: ChildMapping_1.mergeChildMappings(prevChildMapping, nextChildMapping)\n    };\n  };\n\n  TransitionGroup.prototype.componentDidUpdate = function (_prevProps, prevState) {\n    var _this = this;\n\n    var nextChildMapping = ChildMapping_1.getChildMapping(this.props.children);\n    var prevChildMapping = prevState.children;\n\n    for (var key in nextChildMapping) {\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n\n      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {\n        this.keysToEnter.push(key);\n      }\n    }\n\n    for (var key in prevChildMapping) {\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);\n\n      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {\n        this.keysToLeave.push(key);\n      }\n    }\n\n    var keysToEnter = this.keysToEnter;\n    this.keysToEnter = [];\n    keysToEnter.forEach(function (key) {\n      return _this.performEnter(key, _this.childRefs[key]);\n    });\n    var keysToLeave = this.keysToLeave;\n    this.keysToLeave = [];\n    keysToLeave.forEach(function (key) {\n      return _this.performLeave(key, _this.childRefs[key]);\n    });\n  };\n\n  TransitionGroup.prototype.render = function () {\n    var _this = this;\n\n    var childrenToRender = [];\n\n    var _loop_1 = function _loop_1(key) {\n      var child = this_1.state.children[key];\n\n      if (child) {\n        var isCallbackRef = typeof child.ref !== 'string';\n        var factoryChild = this_1.props.childFactory(child);\n\n        var ref = function ref(r) {\n          _this.childRefs[key] = r;\n        };\n\n        if (!isCallbackRef) {\n          throw new Error('string refs are not supported on children of TransitionGroup. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute');\n        }\n\n        if (factoryChild === child && isCallbackRef) {\n          ref = chain_function_1.default(child.ref, ref);\n        }\n\n        childrenToRender.push(react_1.default.cloneElement(factoryChild, {\n          key: key,\n          ref: ref\n        }));\n      }\n    };\n\n    var this_1 = this;\n\n    for (var key in this.state.children) {\n      _loop_1(key);\n    }\n\n    var props = tslib_1.__assign({}, this.props);\n\n    delete props.childFactory;\n    delete props.component;\n    return react_1.default.createElement(this.props.component, props, childrenToRender);\n  };\n\n  TransitionGroup.defaultProps = {\n    component: 'span',\n    childFactory: function childFactory(child) {\n      return child;\n    }\n  };\n  return TransitionGroup;\n}(react_1.default.Component);\n\nexports.default = TransitionGroup;","map":null,"metadata":{},"sourceType":"script"}