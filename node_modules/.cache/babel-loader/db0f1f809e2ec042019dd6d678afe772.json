{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HenY\\\\Documents\\\\GitHub\\\\ieo-rep\\\\ieo-website\\\\src\\\\helpers\\\\index.js\";\nimport React, { Fragment } from \"react\";\nexport const resolvePath = (filePath, prefix = process.env.PUBLIC_URL.concat(\"/\")) => filePath.startsWith(\"http\") ? filePath : prefix.concat(filePath);\nexport const classnames = (...classList) => classList.join(\" \").replace(/\\s+/g, \" \").trim();\nexport const renderText = (text, align) => {\n  return Array.isArray(text) ? text.map((sentence, index) => React.createElement(Fragment, {\n    key: sentence,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, sentence, index < text.length - 1 && !align && React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }))) : text;\n}; // TODO: Each child in a list should have a unique \"key\" prop\n\nexport const renderContent = (content, blockName, variant, align) => content.map(contentGroup => {\n  return Object.entries(contentGroup).map(([key, value]) => {\n    switch (key) {\n      case \"title\":\n        return React.createElement(\"h3\", {\n          key: value,\n          className: classnames(\"\".concat(blockName, \"__title\"), variant ? \"\".concat(blockName, \"__title--theme-\").concat(variant) : \"\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, renderText(value));\n\n      case \"text\":\n        return React.createElement(\"div\", {\n          className: \"\".concat(blockName, \"__text-group\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, Array.isArray(value) ? value.map(text => React.createElement(\"p\", {\n          key: text,\n          className: \"\".concat(blockName, \"__text \").concat(blockName, \"__text--\").concat(align),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, renderText(text, align))) : renderText(value));\n\n      default:\n        return \"\";\n    }\n  });\n});","map":{"version":3,"sources":["C:\\Users\\HenY\\Documents\\GitHub\\ieo-rep\\ieo-website\\src\\helpers\\index.js"],"names":["React","Fragment","resolvePath","filePath","prefix","process","env","PUBLIC_URL","concat","startsWith","classnames","classList","join","replace","trim","renderText","text","align","Array","isArray","map","sentence","index","length","renderContent","content","blockName","variant","contentGroup","Object","entries","key","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,QADyB,EAEzBC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,CAAuBC,MAAvB,CAA8B,GAA9B,CAFgB,KAGrBL,QAAQ,CAACM,UAAT,CAAoB,MAApB,IAA8BN,QAA9B,GAAyCC,MAAM,CAACI,MAAP,CAAcL,QAAd,CAHxC;AAKP,OAAO,MAAMO,UAAU,GAAG,CAAC,GAAGC,SAAJ,KACxBA,SAAS,CACNC,IADH,CACQ,GADR,EAEGC,OAFH,CAEW,MAFX,EAEmB,GAFnB,EAGGC,IAHH,EADK;AAMP,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzC,SAAOC,KAAK,CAACC,OAAN,CAAcH,IAAd,IACHA,IAAI,CAACI,GAAL,CAAS,CAACC,QAAD,EAAWC,KAAX,KACP,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAED,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QADH,EAEGC,KAAK,GAAGN,IAAI,CAACO,MAAL,GAAc,CAAtB,IAA2B,CAACN,KAA5B,IAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFxC,CADF,CADG,GAOHD,IAPJ;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMQ,aAAa,GAAG,CAACC,OAAD,EAAUC,SAAV,EAAqBC,OAArB,EAA8BV,KAA9B,KAC3BQ,OAAO,CAACL,GAAR,CAAYQ,YAAY,IAAI;AAC1B,SAAOC,MAAM,CAACC,OAAP,CAAeF,YAAf,EAA6BR,GAA7B,CAAiC,CAAC,CAACW,GAAD,EAAMC,KAAN,CAAD,KAAkB;AACxD,YAAQD,GAAR;AACE,WAAK,OAAL;AACE,eACE;AACE,UAAA,GAAG,EAAEC,KADP;AAEE,UAAA,SAAS,EAAEtB,UAAU,WAChBgB,SADgB,cAEnBC,OAAO,aAAMD,SAAN,4BAAiCC,OAAjC,IAA6C,EAFjC,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOGZ,UAAU,CAACiB,KAAD,CAPb,CADF;;AAWF,WAAK,MAAL;AACE,eACE;AAAK,UAAA,SAAS,YAAKN,SAAL,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGR,KAAK,CAACC,OAAN,CAAca,KAAd,IACGA,KAAK,CAACZ,GAAN,CAAUJ,IAAI,IACZ;AACE,UAAA,GAAG,EAAEA,IADP;AAEE,UAAA,SAAS,YAAKU,SAAL,oBAAwBA,SAAxB,qBAA4CT,KAA5C,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIGF,UAAU,CAACC,IAAD,EAAOC,KAAP,CAJb,CADF,CADH,GASGF,UAAU,CAACiB,KAAD,CAVhB,CADF;;AAcF;AACE,eAAO,EAAP;AA7BJ;AA+BD,GAhCM,CAAP;AAiCD,CAlCD,CADK","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nexport const resolvePath = (\r\n  filePath,\r\n  prefix = process.env.PUBLIC_URL.concat(\"/\")\r\n) => (filePath.startsWith(\"http\") ? filePath : prefix.concat(filePath));\r\n\r\nexport const classnames = (...classList) =>\r\n  classList\r\n    .join(\" \")\r\n    .replace(/\\s+/g, \" \")\r\n    .trim();\r\n\r\nexport const renderText = (text, align) => {\r\n  return Array.isArray(text)\r\n    ? text.map((sentence, index) => (\r\n        <Fragment key={sentence}>\r\n          {sentence}\r\n          {index < text.length - 1 && !align && <br />}\r\n        </Fragment>\r\n      ))\r\n    : text;\r\n};\r\n\r\n// TODO: Each child in a list should have a unique \"key\" prop\r\nexport const renderContent = (content, blockName, variant, align) =>\r\n  content.map(contentGroup => {\r\n    return Object.entries(contentGroup).map(([key, value]) => {\r\n      switch (key) {\r\n        case \"title\":\r\n          return (\r\n            <h3\r\n              key={value}\r\n              className={classnames(\r\n                `${blockName}__title`,\r\n                variant ? `${blockName}__title--theme-${variant}` : \"\"\r\n              )}\r\n            >\r\n              {renderText(value)}\r\n            </h3>\r\n          );\r\n        case \"text\":\r\n          return (\r\n            <div className={`${blockName}__text-group`}>\r\n              {Array.isArray(value)\r\n                ? value.map(text => (\r\n                    <p\r\n                      key={text}\r\n                      className={`${blockName}__text ${blockName}__text--${align}`}\r\n                    >\r\n                      {renderText(text, align)}\r\n                    </p>\r\n                  ))\r\n                : renderText(value)}\r\n            </div>\r\n          );\r\n        default:\r\n          return \"\";\r\n      }\r\n    });\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}