{"version":3,"sources":["helpers/index.js","components/shared/Image/Image.js","components/shared/Image/index.js","components/layout/Nav/index.js","components/layout/Nav/Nav.js","components/layout/Header/Header.js","components/layout/Header/index.js","components/layout/Template/index.js","components/layout/Template/Template.js","App.js","serviceWorker.js","index.js"],"names":["resolvePath","filePath","prefix","arguments","length","undefined","process","concat","startsWith","Image","_ref","src","alt","restProps","Object","objectWithoutProperties","react_default","a","createElement","assign","defaultProps","Nav","links","className","map","link","react_router_dom","activeClassName","key","name","to","strict","Header","layout_Nav","shared_Image","Template","children","Fragment","layout_Header","App","layout_Template","Boolean","window","location","hostname","match","RootElement","document","getElementById","render","basename","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAAaA,EAAc,SACzBC,GADyB,IAEzBC,EAFyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAEhBG,eAAuBC,OAAO,KAFd,OAIzBN,EAASO,WAAW,QAChBP,EACAC,EAAOK,OAAON,ICCdQ,SAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAKC,EAARF,EAAQE,IAAQC,EAAhBC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,sBACZM,EAAAC,EAAAC,cAAA,MAAAJ,OAAAK,OAAA,CAAKR,IAAKX,EAAYW,GAAMC,IAAKA,GAASC,MAG5CJ,EAAMW,aAAe,CACnBR,IAAK,IASQH,ICnBAA,EDmBAA,EEnBAY,SCIH,SAAAX,GAAe,IAAZY,EAAYZ,EAAZY,MAab,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACZD,GAASA,EAAME,IAdE,SAACC,GAAD,OACpBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEH,UAAU,YACVI,gBAAgB,oBAChBC,IAAKH,EAAKI,KACVC,GAAIL,EAAKK,GACTC,QAAM,GAELN,EAAKI,WCRNP,SAAQ,CACZ,CACEO,KAAM,iCACNC,GAAI,IACH,CACDD,KAAM,sEACNC,GAAI,IACH,CACDD,KAAM,6CACNC,GAAI,IACH,CACDD,KAAM,uCACNC,GAAI,MCjBOE,EDqBA,kBACbhB,EAAAC,EAAAC,cAAA,UAAQK,UAAU,6BAChBP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gBACdP,EAAAC,EAAAC,cAACe,EAAD,CAAKX,MAAOA,IACZN,EAAAC,EAAAC,cAACgB,EAAD,CAAOX,UAAU,OAAOZ,IAAI,sBAAsBC,IAAI,wBEzB7CuB,SCKE,SAAAzB,GAAA,IAAG0B,EAAH1B,EAAG0B,SAAH,OACfpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoB,SAAA,KACErB,EAAAC,EAAAC,cAACoB,EAAD,MACCF,KCAUG,EANH,kBACVvB,EAAAC,EAAAC,cAAA,QAAMK,UAAU,OACdP,EAAAC,EAAAC,cAACsB,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECFAC,EAAcC,SAASC,eAAe,QAE5CC,iBACEjC,EAAAC,EAAAC,cATY,kBACZF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQwB,SAAU5C,gBAChBU,EAAAC,EAAAC,cAACiC,EAAD,QAOF,MACAL,GD6GI,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e8c85d15.chunk.js","sourcesContent":["export const resolvePath = (\r\n  filePath, \r\n  prefix = process.env.PUBLIC_URL.concat('/')\r\n) =>\r\n  filePath.startsWith('http')\r\n    ? filePath\r\n    : prefix.concat(filePath);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { resolvePath } from '../../../helpers';\r\n\r\nimport './Image.scss';\r\n\r\nconst Image = ({ src, alt, ...restProps }) => (\r\n  <img src={resolvePath(src)} alt={alt} {...restProps} />\r\n);\r\n\r\nImage.defaultProps = {\r\n  alt: '',\r\n};\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  className: PropTypes.string,\r\n  alt: PropTypes.string,\r\n};\r\n\r\nexport default Image;","import Image from './Image';\r\n\r\nexport default Image;","import Nav from './Nav';\r\n\r\nexport default Nav;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Nav.scss';\r\n\r\nconst Nav = ({ links }) => {\r\n  const renderNavLink = (link) => (\r\n    <NavLink \r\n      className=\"nav__link\" \r\n      activeClassName=\"nav__link--active\" \r\n      key={link.name} \r\n      to={link.to}\r\n      strict\r\n    >\r\n      {link.name}\r\n    </NavLink>\r\n  );\r\n\r\n  return (\r\n    <nav className=\"nav\">\r\n      {links && links.map(renderNavLink)}\r\n    </nav>\r\n  );\r\n};\r\n\r\nNav.propTypes = {\r\n  links: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      to: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nimport Image from '../../shared/Image';\r\nimport Nav from '../Nav';\r\n\r\nimport './Header.scss';\r\n\r\nconst links = [\r\n  {\r\n    name: 'אודות',\r\n    to: ''\r\n  }, {\r\n    name: 'תחומי פעילות',\r\n    to: ''\r\n  }, {\r\n    name: 'פתרונות',\r\n    to: ''\r\n  }, {\r\n    name: 'מוצרים',\r\n    to: ''\r\n  },\r\n];\r\n\r\nconst Header = () => (\r\n  <header className=\"header header--theme-dark\">\r\n    <main className=\"header__main\">\r\n      <Nav links={links} />\r\n      <Image className=\"logo\" src=\"images/logo/ieo.png\" alt=\"ieo website logo\" />\r\n    </main>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import Header from './Header';\r\n\r\nexport default Header;","import Template from './Template';\r\n\r\nexport default Template;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Header from '../Header';\r\n\r\nimport './Template.scss';\r\n\r\nconst Template = ({ children }) => (\r\n  <>\r\n    <Header />\r\n    {children}\r\n  </>\r\n);\r\n\r\nTemplate.propTypes = {\r\n  children: PropTypes.any,\r\n};\r\n\r\nexport default Template;","import React from 'react';\r\n\r\nimport Template from './components/layout/Template';\r\n\r\nconst App = () => (\r\n  <main className=\"app\">\r\n    <Template></Template>\r\n  </main>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './styles/main.scss';\r\n\r\nconst Index = () => (\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </Router>\r\n);\r\n\r\nconst RootElement = document.getElementById('root');\r\n\r\nrender(\r\n  <Index />,\r\n  RootElement \r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}