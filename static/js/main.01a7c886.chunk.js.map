{"version":3,"sources":["helpers/index.js","components/shared/Image/Image.js","components/shared/Image/index.js","hocs/index.js","components/layout/Nav/index.js","components/layout/Nav/Nav.js","components/layout/Header/Header.js","components/layout/Header/index.js","components/layout/Template/index.js","components/layout/Template/Template.js","components/services/RouterOutlet.js","routes/index.js","App.js","components/services/ErrorBoundary.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","resolvePath","classnames","filePath","prefix","arguments","length","undefined","process","concat","startsWith","_len","classList","Array","_key","join","replace","trim","Image","_ref","src","alt","restProps","Object","objectWithoutProperties","react_default","a","createElement","assign","defaultProps","WrappedComponent","Nav","links","className","map","link","react_router_dom","activeClassName","key","name","to","strict","Header","layout_Nav","Template","children","Fragment","layout_Header","RouterOutlet","routes","_ref$fallback","fallback","react","react_router","route","path","Home","lazy","e","then","bind","exact","render","props","App","layout_Template","services_RouterOutlet","ErrorBoundary","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","info","setState","_this$state","style","whiteSpace","toString","componentStack","Component","Boolean","window","location","hostname","match","RootElement","document","getElementById","services_ErrorBoundary","basename","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01a7c886.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nexport const resolvePath = (\n  filePath, \n  prefix = process.env.PUBLIC_URL.concat('/')\n) =>\n  filePath.startsWith('http')\n    ? filePath\n    : prefix.concat(filePath);\n\nexport const classnames = (...classList) => \n  classList\n    .join(' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n\nexport const renderText = (text) =>\n  Array.isArray(text)\n    ? text.map(sentence => <Fragment key={sentence}>{sentence} <br /></Fragment>)\n    : text;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { resolvePath } from '../../../helpers';\n\nimport './Image.scss';\n\nconst Image = ({ src, alt, ...restProps }) => (\n  <img src={resolvePath(src)} alt={alt} {...restProps} />\n);\n\nImage.defaultProps = {\n  alt: '',\n};\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  alt: PropTypes.string,\n};\n\nexport default Image;","import Image from './Image';\n\nexport default Image;","/* eslint-disable react/display-name */\nimport React from 'react';\n\nexport const withProps = (WrappedComponent) => (props) => (\n  <WrappedComponent {...props} />\n);","import Nav from './Nav';\n\nexport default Nav;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nimport './Nav.scss';\n\nconst Nav = ({ links }) => {\n  const renderNavLink = (link) => (\n    <NavLink \n      className=\"nav__link\" \n      activeClassName=\"nav__link--active\" \n      key={link.name} \n      to={link.to}\n      strict\n    >\n      {link.name}\n    </NavLink>\n  );\n\n  return (\n    <nav className=\"nav\">\n      {links && links.map(renderNavLink)}\n    </nav>\n  );\n};\n\nNav.propTypes = {\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      to: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Nav;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Image from '../../shared/Image';\nimport Nav from '../Nav';\n\nimport './Header.scss';\n\nconst links = [\n  {\n    name: 'אודות',\n    to: ''\n  }, {\n    name: 'תחומי פעילות',\n    to: ''\n  }, {\n    name: 'פתרונות',\n    to: ''\n  }, {\n    name: 'מוצרים',\n    to: ''\n  },\n];\n\nconst Header = () => (\n  <header className=\"header header--theme-dark\">\n    <main className=\"header__main\">\n      <Nav links={links} />\n      <Link to=\"/\">\n        <Image className=\"logo\" src=\"images/logo/ieo.png\" alt=\"ieo website logo\" />\n      </Link>\n    </main>\n  </header>\n);\n\nexport default Header;","import Header from './Header';\n\nexport default Header;","import Template from './Template';\n\nexport default Template;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from '../Header';\n\nimport './Template.scss';\n\nconst Template = ({ children }) => (\n  <>\n    <Header />\n    {children}\n  </>\n);\n\nTemplate.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default Template;","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst RouterOutlet = ({ routes, fallback = null }) => {\n  const renderRoute = (route) => (\n    <Route key={route.path} {...route} />\n  );\n\n  return (\n    <Suspense fallback={fallback}>\n      <Switch>\n        {routes.map(renderRoute)}\n      </Switch>\n    </Suspense>\n  );\n};\n\nRouterOutlet.propTypes = {\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      path: PropTypes.string.isRequired,\n      exact: PropTypes.bool,\n      render: PropTypes.func.isRequired,\n      component: PropTypes.node,\n    })\n  ).isRequired,\n  fallback: PropTypes.any,\n};\n\nexport default RouterOutlet;","import { lazy } from 'react';\n\nimport { withProps } from '../hocs';\n\nconst Home = lazy(() => import('../pages/Home'));\n\nconst routes = [\n  {\n    path: '/',\n    exact: true,\n    render: withProps(Home),\n  }\n];\n\nexport default routes;","import React from 'react';\n\nimport Template from './components/layout/Template';\nimport RouterOutlet from './components/services/RouterOutlet';\n\nimport routes from './routes';\n\nconst App = () => (\n  <main className=\"app\">\n    <Template>\n      <RouterOutlet {...{routes}} />\n    </Template>\n  </main>\n);\n\nexport default App;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      info: null,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      error,\n      info\n    });\n  }\n\n  render() {\n    const { error, info } = this.state;\n\n    if (error) {\n      return (\n        <div className=\"error-boundary\">\n          <details \n            style={{ whiteSpace: 'pre-wrap' }}\n          >\n            <summary>Something went wrong</summary>\n            <p>{error.toString()}</p>\n            <hr />\n            <p>{info.componentStack}</p>\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default ErrorBoundary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport ErrorBoundary from './components/services/ErrorBoundary';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/main.scss';\n\nconst Index = () => (\n  <ErrorBoundary>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </ErrorBoundary>\n);\n\nconst RootElement = document.getElementById('root');\n\nrender(\n  <Index />,\n  RootElement \n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}